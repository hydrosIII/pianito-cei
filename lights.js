///El js de las luces: fuente Tiffany Rayside, Liquid Lights, https://codepen.io/tmrDevelops/pen/rVNxVQ , modified
    
    window.requestAnimFrame = (function() {
        ///compatibilidad con todos los buscadores, webkit, o mozilla, o microsoft*/
            return window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function(callback) {
              window.setTimeout(callback, 1000 / 60);
            };
        })();
        
        //define variables/
        //capture the canvas element/
        var c = document.getElementById('canv');
        //////// define variables for the canvas 
        ///// 2 dimensional canvas
        var $ = c.getContext('2d');
        ////// canvas width is the same as the window browser width
        /// use the var instead of const because it changes
        var w = c.width = window.innerWidth;
        ////// canvas height is the same as the window browser height
        var h = c.height = window.innerHeight;
        ///// variables for half the widht and half the height
        var _w = w * 0.5;
        var _h = h * 0.5;
        ///empty array
        var CircleMeasures = [];
        /// a counter
        var counter = 0;
        
        ///// functions start on loading the window
        /// it means loading the page
        window.addEventListener('load', resize);
        
        window.addEventListener('resize', resize, false);
        
        //// a function to resize the window, if the page is rezised the canvas is adjusted accordingly
        function resize() {
          c.width = w = window.innerWidth;
          c.height = h = window.innerHeight;
          /// define the canvas positions as absolute in css
          c.style.position = 'absolute';
          ///// Reposition the canvas
          c.style.left = (window.innerWidth - w) *
            .01 + 'px';
          c.style.top = (window.innerHeight - h) *
            .01 + 'px';
        }
        
        ////// the animation function. 
        // A wrapper function that define the periodicity of the animation
        function anim() {
          counter++;
        //// we define a condition for the bubbles to appear often
        /// the condition is a simple  and a module
        /// if the counter is divisible by x then display the animation
        /// in short it makes the animation slower
          if (counter % 7 == 0) draw();
          window.requestAnimFrame(anim);
        }
        anim();
        
        
        /// a simple function for color randomization
        function randomColor() {
          var r = Math.floor(Math.random() * 180);
          var g = Math.floor(Math.random() * 130);
          var b = Math.floor(Math.random() * 200);
          //// we define three variables for color randomization and then apply then to rgb color. Simple
          return "rgb(" + r + "," + g + "," + b + ")";
        }
        
        ///// a randomization function used for the size and position of the circles.
        // We define the range of numbers in which the randomization is given
        //// using the min, max variables
        function rng(min, max) {
          return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        
        function draw() {
        
            
          var splot = {
            ///// Define the variables of the circles using the function rng.
          ///// taking in account possition, x and y.
          /// radius (r)
          /// and SPx and SPy, values to move the circles to that coordinates. 
            x: rng(_w - 900, _w + 900),
            y: rng(_h - 900, _h + 900),
            
            r: rng(20, 80),
            spX: rng(-1, 1),
            spY: rng(-1, 1)
          };
        
          /// we push the variables to the array previously defined. 
          //// Each x,y,r,spX, and spY represents the variables for a circle. 
          //// We push these variable every time the functions is called
          /// So the array keeps growing
          CircleMeasures.push(splot);
        
          /// We define a limit for the array to stop it for growing indefinitedly. In 100 elements. 
          while (CircleMeasures.length > 100) {
            /// Takeout one element of the array
            CircleMeasures.shift();
          }


          //// the core of the animation is here.       
          /// We clear the canvas
          $.clearRect(0, 0, w, h);             
          for (var i = 0; i < CircleMeasures.length; i++) {
                    //// We take each element of the array
            splot = CircleMeasures[i];;
  /// We fill the circle with a random Color generated by the previous function
            $.fillStyle = randomColor();
            $.beginPath();
            //// We draw a circle using the variables randomly defined in the splot.
            /// splot.x is the x coordinate of the circle where it appears in relation to the window.
            /// splot.y is the y coordinate of the circle where it appears in relation to the window.
            // splot.r is the measure of the radius if the circle.
            $.arc(splot.x, splot.y, splot.r, 0, Math.PI * 2, true);
            //// Define a shadow blur for the circle, to make it appear like it is shinning
            $.shadowBlur = 80;
            ///// a Shadow offset in the x and y coordinates.
            $.shadowOffsetX = 2;
            $.shadowOffsetY = 2;
            ///// a shadow color that it is randomized. It is the same color as above
            $.shadowColor = randomColor();
            //// The composite style
            $.globalCompositeOperation = 'lighter';
            /// draw it
            $.fill();     
        /// This piece of code defines a little bit of movement of the circle
        /// In conjunction with the effect of dimishing it makes a nice animation of lights
            splot.x = splot.x + splot.spX;
            splot.y = splot.y + splot.spY;
            /// With this piece of code we define that the circles begins to shrink and then dissapears
            /// the radius if the circles begind to diminish multiplied by 0.96
            splot.r = splot.r * 0.96;
          }
        }
